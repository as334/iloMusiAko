// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"iloMusiAko/ent/predicate"
	"iloMusiAko/ent/user"
	"sync"

	"github.com/facebook/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeUser = "User"
)

// UserMutation represents an operation that mutate the Users
// nodes in the graph.
type UserMutation struct {
	config
	op            Op
	typ           string
	id            *int
	_DiscordID    *uint64
	add_DiscordID *uint64
	_Games        *uint64
	add_Games     *uint64
	_Points       *uint64
	add_Points    *uint64
	_Rating       *uint64
	add_Rating    *uint64
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*User, error)
	predicates    []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows to manage the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for User.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the id field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetDiscordID sets the DiscordID field.
func (m *UserMutation) SetDiscordID(u uint64) {
	m._DiscordID = &u
	m.add_DiscordID = nil
}

// DiscordID returns the DiscordID value in the mutation.
func (m *UserMutation) DiscordID() (r uint64, exists bool) {
	v := m._DiscordID
	if v == nil {
		return
	}
	return *v, true
}

// OldDiscordID returns the old DiscordID value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldDiscordID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDiscordID is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDiscordID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDiscordID: %w", err)
	}
	return oldValue.DiscordID, nil
}

// AddDiscordID adds u to DiscordID.
func (m *UserMutation) AddDiscordID(u uint64) {
	if m.add_DiscordID != nil {
		*m.add_DiscordID += u
	} else {
		m.add_DiscordID = &u
	}
}

// AddedDiscordID returns the value that was added to the DiscordID field in this mutation.
func (m *UserMutation) AddedDiscordID() (r uint64, exists bool) {
	v := m.add_DiscordID
	if v == nil {
		return
	}
	return *v, true
}

// ResetDiscordID reset all changes of the "DiscordID" field.
func (m *UserMutation) ResetDiscordID() {
	m._DiscordID = nil
	m.add_DiscordID = nil
}

// SetGames sets the Games field.
func (m *UserMutation) SetGames(u uint64) {
	m._Games = &u
	m.add_Games = nil
}

// Games returns the Games value in the mutation.
func (m *UserMutation) Games() (r uint64, exists bool) {
	v := m._Games
	if v == nil {
		return
	}
	return *v, true
}

// OldGames returns the old Games value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldGames(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldGames is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldGames requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGames: %w", err)
	}
	return oldValue.Games, nil
}

// AddGames adds u to Games.
func (m *UserMutation) AddGames(u uint64) {
	if m.add_Games != nil {
		*m.add_Games += u
	} else {
		m.add_Games = &u
	}
}

// AddedGames returns the value that was added to the Games field in this mutation.
func (m *UserMutation) AddedGames() (r uint64, exists bool) {
	v := m.add_Games
	if v == nil {
		return
	}
	return *v, true
}

// ResetGames reset all changes of the "Games" field.
func (m *UserMutation) ResetGames() {
	m._Games = nil
	m.add_Games = nil
}

// SetPoints sets the Points field.
func (m *UserMutation) SetPoints(u uint64) {
	m._Points = &u
	m.add_Points = nil
}

// Points returns the Points value in the mutation.
func (m *UserMutation) Points() (r uint64, exists bool) {
	v := m._Points
	if v == nil {
		return
	}
	return *v, true
}

// OldPoints returns the old Points value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldPoints(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPoints is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPoints requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPoints: %w", err)
	}
	return oldValue.Points, nil
}

// AddPoints adds u to Points.
func (m *UserMutation) AddPoints(u uint64) {
	if m.add_Points != nil {
		*m.add_Points += u
	} else {
		m.add_Points = &u
	}
}

// AddedPoints returns the value that was added to the Points field in this mutation.
func (m *UserMutation) AddedPoints() (r uint64, exists bool) {
	v := m.add_Points
	if v == nil {
		return
	}
	return *v, true
}

// ResetPoints reset all changes of the "Points" field.
func (m *UserMutation) ResetPoints() {
	m._Points = nil
	m.add_Points = nil
}

// SetRating sets the Rating field.
func (m *UserMutation) SetRating(u uint64) {
	m._Rating = &u
	m.add_Rating = nil
}

// Rating returns the Rating value in the mutation.
func (m *UserMutation) Rating() (r uint64, exists bool) {
	v := m._Rating
	if v == nil {
		return
	}
	return *v, true
}

// OldRating returns the old Rating value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldRating(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRating is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRating requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRating: %w", err)
	}
	return oldValue.Rating, nil
}

// AddRating adds u to Rating.
func (m *UserMutation) AddRating(u uint64) {
	if m.add_Rating != nil {
		*m.add_Rating += u
	} else {
		m.add_Rating = &u
	}
}

// AddedRating returns the value that was added to the Rating field in this mutation.
func (m *UserMutation) AddedRating() (r uint64, exists bool) {
	v := m.add_Rating
	if v == nil {
		return
	}
	return *v, true
}

// ResetRating reset all changes of the "Rating" field.
func (m *UserMutation) ResetRating() {
	m._Rating = nil
	m.add_Rating = nil
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m._DiscordID != nil {
		fields = append(fields, user.FieldDiscordID)
	}
	if m._Games != nil {
		fields = append(fields, user.FieldGames)
	}
	if m._Points != nil {
		fields = append(fields, user.FieldPoints)
	}
	if m._Rating != nil {
		fields = append(fields, user.FieldRating)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldDiscordID:
		return m.DiscordID()
	case user.FieldGames:
		return m.Games()
	case user.FieldPoints:
		return m.Points()
	case user.FieldRating:
		return m.Rating()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldDiscordID:
		return m.OldDiscordID(ctx)
	case user.FieldGames:
		return m.OldGames(ctx)
	case user.FieldPoints:
		return m.OldPoints(ctx)
	case user.FieldRating:
		return m.OldRating(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldDiscordID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDiscordID(v)
		return nil
	case user.FieldGames:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGames(v)
		return nil
	case user.FieldPoints:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPoints(v)
		return nil
	case user.FieldRating:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRating(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *UserMutation) AddedFields() []string {
	var fields []string
	if m.add_DiscordID != nil {
		fields = append(fields, user.FieldDiscordID)
	}
	if m.add_Games != nil {
		fields = append(fields, user.FieldGames)
	}
	if m.add_Points != nil {
		fields = append(fields, user.FieldPoints)
	}
	if m.add_Rating != nil {
		fields = append(fields, user.FieldRating)
	}
	return fields
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case user.FieldDiscordID:
		return m.AddedDiscordID()
	case user.FieldGames:
		return m.AddedGames()
	case user.FieldPoints:
		return m.AddedPoints()
	case user.FieldRating:
		return m.AddedRating()
	}
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	case user.FieldDiscordID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDiscordID(v)
		return nil
	case user.FieldGames:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddGames(v)
		return nil
	case user.FieldPoints:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPoints(v)
		return nil
	case user.FieldRating:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRating(v)
		return nil
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldDiscordID:
		m.ResetDiscordID()
		return nil
	case user.FieldGames:
		m.ResetGames()
		return nil
	case user.FieldPoints:
		m.ResetPoints()
		return nil
	case user.FieldRating:
		m.ResetRating()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown User edge %s", name)
}
